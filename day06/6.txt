static {  // static 블록 : static 필드 초기화 역할
	System.out.println("static 블록");
}
	
	
	
{// 인스턴스 블록 : 객체 생성시 호출되어 객체초기화 역할
	System.out.println("인스턴스 블록");
}





final을 해당 클래스를 상속받지 못하게 만들 때도 사용한다!!(즉, 클래스 선언할 때 fianl 선언하면 이 클래스는 최종적인 클래스가 된다)

final로 지정된 메서드는 오버라이딩 불가





로컬클래스는 접근제한자(public, private) 및 static 붙일 수 없다



익명객체 선언과 동시에 생성, 일회용
하나의 명령문이라 ;붙여야!


부모클래스에서 private 접근제한을 갖는 필드와 메소드는 상속에서 제외된다!
디폴드 필드와 메소드 역시 다른패키지에서 상속하면 상속에서 제외!!




super() : 부모의 기본생성자 호출!!

public Sonata() {
	super(); // 부모 생성자 호출 : 생략하면 자바컴파일러는 얘를 자동으로 만들어준다!!!!  // 맨 첫줄에만 와야
	System.out.println("Sonata 생성자 입니다.");
}





// 부모클래스의 필드와 자식클래스에서 만든 필드이름이 같을 경우 부모클래스 멤버를 사용하기 위해서는 super 키워드 사용해야!! (그냥 사용하면 this가 생략되어 자식클래스의 멤버 사용된다)
System.out.println("SUV 속도 : " + super.speed); 
super.run();





모든 부모타입이 자식타입으로 강제변환할 수 있는거 아니다!!
자식 타입이 부모타입으로 자동타이변환한 후 다시 자식타입으로 변환할 때만 강제타입 가능!!(자식타입이 부모타입으로 변환된 상태에서만 가능!!)



// 다형성은 부모타입의 변수를 자식객체로 생성하는 것(부모필드와 부모메소드만 접근 가능!!)

Parent poly3 = poly2;   // 다시 업캐스팅(자동 타입변환)



class Person extends Run{
	
	String name = "홍길동";
	
	public void walk() {
		System.out.println(name + "이 산책을 한다.");
	}


	public void run() {
		System.out.println(name + "이 " + speed + "의 속도로 달린다");    // 여기서는 자식에게만 있는 name에 접근 가능!!★
		walk();     // 역시 자식에게만 있는 walk() 도 접근 가능!!★
	}

}



추상클래스는 객체들의 규격 맞추는 설계도 느낌